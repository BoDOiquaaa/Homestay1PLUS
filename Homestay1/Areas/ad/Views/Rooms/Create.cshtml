@model Homestay1.Models.Room
@{
    ViewData["Title"] = "Thêm phòng";
    Layout = "_AdminLayout";
}
<h2>@ViewData["Title"]</h2>

<form id="createForm">
    @Html.AntiForgeryToken()

    <!-- Dropdown cho Homestay -->
    <div class="mb-3">
        <label class="form-label">Homestay</label>
        <select name="HomestayID" class="form-control">
            @foreach (var homestay in ViewData["Homestays"] as List<Homestay1.Models.Homestay>)
            {
                        <option value="@homestay.HomestayID">@homestay.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Tên phòng</label>
        <input type="text" name="RoomName" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Giá mỗi đêm</label>
        <input type="number" name="PricePerNight" class="form-control" />
    </div>

    <!-- Dropdown Trạng thái -->
    <div class="mb-3">
        <label class="form-label">Trạng thái phòng</label>
        <select name="Status" class="form-control">
            <option value="Available">Còn phòng</option>
            <option value="Unavailable">Không còn phòng</option>
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Chọn hình ảnh</label>
        <input type="file" name="ImageFile" class="form-control" accept="image/*" />
    </div>

    <button type="button" id="saveBtn" class="btn btn-primary">Lưu</button>
    <a href="@Url.Action("Index", "Rooms", new { area = "ad" })" class="btn btn-secondary">Hủy</a>
</form>

@section Scripts {
            <script>
                document.getElementById('saveBtn').addEventListener('click', async () => {
                    var form = document.getElementById('createForm');
                    var token = form.querySelector('input[name="__RequestVerificationToken"]').value;
                    var data = new FormData(form);

                    try {
                        var res = await fetch('@Url.Action("Create", "Rooms", new { area = "ad" })', {
                            method: 'POST',
                            headers: { 
                                'X-Requested-With': 'XMLHttpRequest',
                                'RequestVerificationToken': token 
                            },
                            body: data
                        });

                        var text = await res.text();
                        let payload;
                        try { 
                            payload = JSON.parse(text); 
                        } catch {
                            alert(`Lỗi từ máy chủ: ${res.status}\n${text}`);
                            return;
                        }

                        if (payload.success === false && payload.errors) {
                            alert("Lỗi xác thực:\n" + payload.errors.join("\n"));
                            return;
                        }

                        if (payload.success) {
                            window.location = payload.redirectUrl;
                        } else {
                            alert("Lỗi không xác định từ máy chủ:\n" + text);
                        }
                    } catch (ex) {
                        console.error(ex);
                        alert("Yêu cầu thất bại: " + ex.message);
                    }
                });
            </script>
}
